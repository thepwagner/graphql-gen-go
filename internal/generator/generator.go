package generator

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/graphql-go/graphql/language/ast"

	"github.com/thepwagner/magenny/internal/graphql"
)

type Generator struct {
	schema    *ast.Document
	indexed   graphql.IndexedSchema
	outputDir string
}

func NewGenerator(schema *ast.Document, outputDir string) *Generator {
	return &Generator{
		schema:    schema,
		indexed:   graphql.IndexSchema(schema),
		outputDir: outputDir,
	}
}

var headerTmpl = template.Must(template.New("header").Parse(`// Code generated by graphql-gen-go. DO NOT EDIT.
package {{.Name}}
`))

type headerTmplParams struct {
	Name string
}

// NewFile creates a golang file, and initializes it with a header+package
// Internal-use, exposed for tests
func (g Generator) NewFile(name string) (*os.File, error) {
	filename := fmt.Sprintf("%s.gql.go", strings.ToLower(name))
	path := filepath.Join(g.outputDir, filename)
	f, err := os.Create(path)
	if err != nil {
		return nil, err
	}
	_, pkg := filepath.Split(g.outputDir)

	params := headerTmplParams{
		Name: pkg,
	}
	if err := headerTmpl.Execute(f, params); err != nil {
		return nil, err
	}
	return f, nil
}
