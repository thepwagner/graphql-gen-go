# https://github.com/nnance/swapi-apollo/tree/master/schema

schema {
  query: RootQuery
}

type RootQuery {
  allFilms(offset: Int, limit: Int): [Film]
  film(id: ID, filmID: ID): Film
  allPeople(offset: Int, limit: Int): [Person]
  person(id: ID, personID: ID): Person
  allPlanets(offset: Int, limit: Int): [Planet]
  planet(id: ID, planetID: ID): Planet
  allSpecies(offset: Int, limit: Int): [Species]
  species(id: ID, speciesID: ID): Species
  allStarships(offset: Int, limit: Int): [Starship]
  starship(id: ID, starshipID: ID): Starship
  allVehicles(offset: Int, limit: Int): [Vehicle]
  vehicle(id: ID, vehicleID: ID): Vehicle
  node(id: ID!): Node
}

interface Node {
  id: ID!
}

type FilmDetails {
  species: [Species]
  starships: [Starship]
  vehicles: [Vehicle]
  characters: [Person]
  planets: [Planet]
}

type Film implements Node {
  title: String!
  episodeID: Int
  openingCrawl: String
  director: String
  producers: [String]
  releaseDate: String
  created: String
  edited: String
  details: FilmDetails
  id: ID!
}

type Person implements Node {
  name: String!
  birthYear: String
  eyeColor: String
  gender: String
  hairColor: String!
  height: Int
  mass: Int
  skinColor: String
  homeworld: Planet
  films: [Film]
  species: [Species]
  starships: [Starship]
  vehicles: [Vehicle]
  created: String
  edited: String
  id: ID!
}

type Planet implements Node {
  name: String
  diameter: Int
  rotationPeriod: Int
  orbitalPeriod: Int
  gravity: String
  population: Int
  climates: [String]
  terrains: [String]
  surfaceWater: Float
  residents: [Person]
  films: [Film]
  created: String
  edited: String
  id: ID!
}

type Species implements Node {
  name: String!
  classification: String
  designation: String
  averageHeight: Float
  averageLifespan: Int
  eyeColors: [String]
  hairColors: [String]
  skinColors: [String]
  language: String
  homeworld: Planet
  people: [Person]
  films: [Film]
  created: String
  edited: String
  id: ID!
}

type Starship implements Node {
  name: String
  model: String
  starshipClass: String
  manufacturers: [String]
  costInCredits: Float
  length: Float
  crew: String
  passengers: String
  maxAtmospheringSpeed: Int
  hyperdriveRating: Float
  MGLT: Int
  cargoCapacity: Float
  consumables: String
  pilots: [Person]
  films: [Film]
  created: String
  edited: String
  id: ID!
}

type Vehicle implements Node {
  name: String
  model: String
  vehicleClass: String
  manufacturers: [String]
  costInCredits: Int
  length: Float
  crew: String
  passengers: String
  maxAtmospheringSpeed: Int
  cargoCapacity: Int
  consumables: String
  pilots: [Person]
  films: [Film]
  created: String
  edited: String
  id: ID!
}
